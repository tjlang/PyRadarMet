#! /usr/bin/env python

#======================================================================
# Import needed libraries
import pyart
import argparse
import numpy as np
import os
import matplotlib.pylab as plt
from glob import glob

from pyradarmet.zdrcal import calculate_zdr_offset as zdrcal
from pyradarmet.zdrcal import plot_zdr_rhv,plot_add_stats,oplot_zdr_rhv
#======================================================================
# The user can modify these next variables to control how the program processes data
minSig = 0.5 # Maximum standard deviation to accept in analysis
minSample = 100 # Minimum number of samples used to perform calculations
mindBZ = 5. # Minimum reflectivity to accept in analysis (proxy for SNR)
gateSkip = 7 # The number of gates at the beginning or array (closest to radar) to cut out
minRhv = 0.85 # Minimum correlation coefficient to accept in analysis
maxHt = 5. # Maximum height to accept in analysis
zh_lims = [-20.,30.] # Range of Reflectivity to plot
rh_lims = [.8,1.] # Range of Copolar Correlation Coefficient to plot
dr_lims = [-1.5,1.5] # Range of Differential reflectivity to plot
kd_lims = [.2,.4] # Range of Specific Differential Phase to plot

pOut = "zdr_bias"
pType = "png"
#======================================================================

if __name__ == '__main__':

    # parse the arguments
    parser = argparse.ArgumentParser(
        description='Print differential reflectivity calibration statistics.')
    parser.add_argument('searchstring', type=str, help='radar file(s) for calculation, if more than one file quotations are needed')

 #   group = parser.add_mutually_exclusive_group()

    igroup = parser.add_argument_group(
        title='ingest method, optional',
        description=('The method of file ingest can be specified. '
                     'If no ingest is specified, the format of the file will '
                     'be used to determine the best ingest method. '
                     'Specify only one of the following:'))

    igroup.add_argument('--sigmet', action='store_true',
                        help='Sigmet/IRIS ingest')
    igroup.add_argument('--mdv', action='store_true', help='MDV ingest')
    igroup.add_argument('--cfradial', action='store_true',
                        help='CF/Radial ingest')
    igroup.add_argument('--rsl', action='store_true',
                        help='RSL ingest')
    igroup.add_argument('--nexrad_archive', action='store_true',
                        help='NEXRAD level 2 archive ingest')
    igroup.add_argument('--nexrad_cdm', action='store_true',
                        help='NEXRAD level 2 CDM ingest')

    parser.add_argument('-v', '--version', action='version',
                        version='Py-ART version %s' % (pyart.__version__))
                        
    parser.add_argument('-p', '--plot', action='store_true',
                        help='create an output plot file')
#    parser.add_argument('-t', '--text', action='store_true',
#                        help='create and output text file')
                        
    args = parser.parse_args()
    # ======================================================================
    
    # Search for the file(s)
    flist = glob(args.searchstring)
    
    multiStat = False
    if len(flist) > 1:
        multiStat = True
    # Create an array to hold data, only really used if multiple files
    Stats = np.ma.empty([len(flist),3])

    index = 0
    indexGood = 0
    OutTx = open('zdr_offset.out','w')   
    for file in flist:
        fName, fileExt = os.path.splitext(file)
        # read in the file
        if args.sigmet:
            radar = pyart.io.read_sigmet(file)
        elif args.mdv:
            radar = pyart.io.read_mdv(file)
        elif args.cfradial:
            radar = pyart.io.read_cfradial(file)
        elif args.rsl:
            radar = pyart.io.read_rsl(file)
        elif args.nexrad_archive:
            radar = pyart.io.read_nexrad_archive(file)
        elif args.nexrad_cdm:
            radar = pyart.io.read_nexrad_cdm(file)
        else:
            radar = pyart.io.read(file)

        # Call the bias calculation routine
        zdr_bias = zdrcal(radar, remove_first_n_gates=gateSkip, sample_min=minSample,\
                          rhv_min=minRhv, sig_min=minSig, dbz_min=mindBZ, Htmax=maxHt)
                  
        # If minimun number of samples is met
        if zdr_bias is not None:
        
            txVar = ("Avg Zdr: "+str(zdr_bias['volume_average'])+\
                     "  Std Dev: "+str(zdr_bias['volume_standard_deviation'])+\
                     "  Good Pts: "+str(zdr_bias['volume_number_good'])+\
                     " File: "+os.path.basename(fName))
        
            if zdr_bias['volume_standard_deviation'] > minSig:
                Stats[index,0] = np.ma.masked
                Stats[index,1] = np.ma.masked
                Stats[index,2] = np.ma.masked
            else:
                Stats[index,0] = zdr_bias['volume_average']
                Stats[index,1] = zdr_bias['volume_standard_deviation']
                Stats[index,2] = zdr_bias['volume_number_good']
        
            # Create plot if desired
            if args.plot:
                if index == 0:
                    fig, ax,axes = plot_zdr_rhv(zdr_bias['height_average'],zdr_bias['rhv_height_average'],
                        zdr_bias['range']['data']/1000.,ymax=maxHt,
                        xlims1=dr_lims,xlims2=rh_lims,
                        label=True,labelTx=zdr_bias['radar_name'])
                else:
##                if zdr_bias['volume_standard_deviation'] > minSig:
                    if zdr_bias['height_standard_deviation'].mean() > minSig:
                        alff = 0.1
                    else:
                        alff = 1.
                    oplot_zdr_rhv(zdr_bias['height_average'],zdr_bias['rhv_height_average'],
                        zdr_bias['range']['data']/1000.,ax=axes,alf=alff)
            # Increment indices
            index += 1
##        if zdr_bias['volume_standard_deviation'] <= minSig:
            if zdr_bias['height_standard_deviation'].mean() <= minSig:
                indexGood += 1
            
            RadName = zdr_bias['radar_name']
        
            del zdr_bias
        # If zdr_bias returns None, then too few samples were uncovered.
        else:
            txVar = ("Not enough samples in volume")
            RadName = "No_Data"
                     
        print txVar
        OutTx.write(txVar+"\n")

    OutTx.write("ALL FILES WITH STD DEV < "+str(minSig)+" YIELD ("+str(indexGood)+" files)::\n")
    txVar = ("Avg Zdr: "+str(Stats[:,0].mean())+"  Std Dev: "+str(Stats[:,1].mean())+
          "  Good Pts: "+str(Stats[:,2].sum()))
    OutTx.write(txVar+"\n")
    OutTx.close()
    
    # Change the output name of the file
    cmd = 'mv zdr_offset.out '+RadName+'_zdr_offset.out'
    os.system(cmd)
    
    if multiStat:
        plot_add_stats(instance='multi',avg=Stats[:,0].mean(),
                        sd=Stats[:,1].mean(),points=Stats[:,2].sum(),
                        good_samples=indexGood,tot_samples=index)
    else:
        plot_add_stats(instance='single',avg=Stats[0,0],sd=Stats[0,1],points=Stats[0,2])
        
#    plt.show()
# Create final output file name
    fOut = RadName+'_'+pOut+'.'+pType
    print "Creating "+ fOut
    plt.savefig(fOut,format=pType)
